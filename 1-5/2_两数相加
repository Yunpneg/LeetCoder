给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。

  如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。

  您可以假设除了数字 0 之外，这两个数都不会以 0 开头。
  

 /**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode* head = new ListNode(-1); //初始化链表, 用于存放结果
        //赋值为-1或null表示这是头结点
        ListNode* h = head; //移动指针
        int sum = 0; //列表的位加和
        bool carry = false; //是否进位
        while(l1!=NULL || l2!=NULL){
            int sum = 0; //每次都将加和强制初始化为0
            if(l1!=NULL){
                sum+= l1->val; //链表当前指针指向的值
                l1 = l1->next; //指向下一个节点
            }
            if(l2!=NULL){
                sum+=l2->val;
                l2 = l2->next;
            }
            if(carry){ //如果出现进位, sum加1
                sum++;
            }
            h->next = new ListNode(sum % 10); //给链表head赋值
            h = h->next; //指向下一个节点
            carry = sum >=10 ? true:false; // 计算最后是否进位       
        }
        if(carry){ //如最终存在进位, 则最后的一个节点赋值为1(即最高位)
                h->next = new ListNode(1); 
            }
        return head->next; //不包括第一个节点-1
    }
};
