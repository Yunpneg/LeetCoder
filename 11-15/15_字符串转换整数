首先，该函数会根据需要丢弃无用的开头空格字符，直到寻找到第一个非空格的字符为止。

当我们寻找到的第一个非空字符为正或者负号时，则将该符号与之后面尽可能多的连续数字组合起来，作为该整数的正负号；
假如第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成整数

示例 1:

输入: "42"
输出: 42
示例 2:

输入: "   -42"
输出: -42
解释: 第一个非空白字符为 '-', 它是一个负号。


class Solution {
public:
    int myAtoi(string str) {
        if(str.empty()){ //判断字符串是否为空
            return 0;
        }
        int len = str.size();
        int inx = str.find_first_not_of(" "); //寻找字符串开头不是空格的位置
        if(inx!=-1){ //如果字符串中存在这样的位置 
            //下标是从0开始的, 所以inx要减去1
            str = str.substr(inx, len-(inx-1)); //截取字符串, 从这个位置开始截取到字符串末尾
        }
        
        bool flag = false; //flase为正, true为负
        long long rev = 0; //设置为long long, 是为了防止转换过程发生溢出
        //当字符串第一个字符是合法的时候, 即使正, 负号, 或者0-9.
        if((str[0]<='9' && str[0]>='0') || str[0]=='+' || str[0]=='-'){
            int i = 0;
            //如果字符串第一位是+,-号, 则字符串从第二位开始转化
            if(str[0] == '+'){
                i=1;
            }
            else if(str[0] == '-'){
                i=1;
                flag=true; //负
            }
            
            for(; i<str.size();i++){
                if(str[i]<='9' && str[i]>='0'){
                    //将该位置的元素转化为数字, 同时将已有的数字乘以10倍, 再相加
                    rev = rev*10 + (str[i]-'0');
                    //判断溢出
                    if(rev>INT_MAX){
                        if(flag){ //为负
                            return INT_MIN;
                        }
                        else{
                            return INT_MAX;
                        }
                    }
                    
                }
                else break;
            }
        }
        else return 0;
        
        if(flag){
            rev = 0-rev;
        }
        return rev;
    }
};
