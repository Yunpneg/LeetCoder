把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。 
输入一个非减排序的数组的一个旋转，输出旋转数组的最小元素。 例如数组{3,4,5,1,2}为{1,2,3,4,5}的一个旋转，该数组的最小值为1。 
NOTE：给出的所有元素都大于0，若数组大小为0，请返回0。

思路
  1. 采用二分法, 利用双指针, 分别指向头, 尾
  2. 首先判断子数组是否为非递减数组, 即递增或者出现重复数字, 如果是则返回第一个元素, 即最小值
  3. 获取中位值, 分别于left和right对应的值比较
    -> rotateArray[left] < rotateArray[mid] 说明左子数组是递增, 则缩小范围, 令left = mid+1
    -> rotateArray[mid] < rotateArray[right] 说明右子数组是递增, 则缩小范围, 令right = mid
    -> 最后一种情况就是: 存在重复数字, rotateArray[left] == rotateArray[mid] == rotateArray[right], 令left++, 避开重复

//C++ 二分法
class Solution {
public:
    int minNumberInRotateArray(vector<int> rotateArray) {
        if (rotateArray.empty()) return 0;
        int left = 0, right = rotateArray.size() - 1;
        while (left < right) {
            //确认子数组是否是类似1,1,2,4,5,..,7的非递减数组
            if (rotateArray[left] < rotateArray[right]) return rotateArray[left];
             
            int mid = left + (right - left) / 2;
            //如果左半数组为有序数组
            if (rotateArray[left] < rotateArray[mid])
                left = mid + 1;
            //如果右半数组为有序数组
            else if (rotateArray[mid] < rotateArray[right])
                right = mid;
            //否则，rotateArray[left] == rotateArray[mid] == rotateArray[right]
            else {
                left++;
            }
        }
        return rotateArray[left];
    }
};
