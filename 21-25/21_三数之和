给定一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？找出所有满足条件且不重复的三元组。

注意：答案中不可以包含重复的三元组。

例如, 给定数组 nums = [-1, 0, 1, 2, -1, -4]，

满足要求的三元组集合为：
[
  [-1, 0, 1],
  [-1, -1, 2]
]


思路:
1. 排序
2. 拿出第一个数，转化为两数和问题。注意外层循环到倒数第三个数即可
3. 跳过重复元素

class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& num) {
        vector<int> numSet(3); 
        vector< vector<int> > r;
        // 1.排序; 
        sort(num.begin(), num.end());
        int sum;
        int len = num.size();
        // 2.拿出第一个数，转化为两数和问题。注意外层循环到倒数第三个数即可
        for(int i = 0; i < len-2; i++) 
        {
            sum = 0 - num[i];
            numSet[0] = num[i]; //将当前数存放到数组中
        // 3.两数和问题
            for(int j = i+1, k = len-1; j < k;) 
            {
                if(num[j] + num[k] == sum) {
                    numSet[1] = num[j];
                    numSet[2] = num[k];
                    j++, k--;
                    r.push_back(numSet);
                    // 根据题目要求，跳过重复元素
                    while(j < k && num[j] == num[j-1]) 
                        j++;
                    while(j < k && num[k] == num[k+1])
                        k--;
                }
                //不满足条件, 则指针也转移
                else if(num[j] + num[k] < sum)
                    j++;
                else 
                    k--;
            }
            //排除第一个数(num[i])可能的重复元素
            while(i < len-2 && num[i+1] == num[i])
                i++;
        }
        return r;
    }
};
