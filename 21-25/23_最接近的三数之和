给定一个包括 n 个整数的数组 nums 和 一个目标值 target。找出 nums 中的三个整数，使得它们的和与 target 最接近。返回这三个数的和。
假定每组输入只存在唯一答案。

例如，给定数组 nums = [-1，2，1，-4], 和 target = 1.

与 target 最接近的三个数的和为 2. (-1 + 2 + 1 = 2).

思路:
1. 排序, 获取前三个数的累加和, 并得到目标与累加和间的差的绝对值mn
2. 遍历数组, 设置双指针, 循环比较双指针指向的元素和与(fix = target-nums[i])之间的关系
  -> 如果相等, 则返回target
  -> nums[l]+nums[r]-fix < mn, 说明三数之和与target之间的差小于mn, 即更接近target, 则将差赋予绝对值mn, 并返回三数之和
  -> nums[l]+nums[r]>fix, 说明三数之和大于target, 则右指针前移
  -> nums[l]+nums[r]<fix, 说明三数之和小于target, 则左指针后移
  
  
class Solution {
public:
    int threeSumClosest(vector<int>& nums, int target) {
        if(nums.size()<3)
            return {};
        //容器排序
        sort(nums.begin(),nums.end());
        //累加和, 任意设置三个数相加和
        int res=accumulate(nums.begin(),nums.begin()+3,0);
        //绝对值
        int mn=abs(target-res);
        for(int i=0;i<nums.size();i++){
            int fix=target-nums[i];
            int l=i+1,r=nums.size()-1;
            //对撞指针(头尾指针)
            while(l<r){
                if(nums[l]+nums[r]==fix)
                    return target;
                else {
                    if(abs(nums[l]+nums[r]-fix)<mn){
                        mn=abs(nums[l]+nums[r]-fix);
                        res=nums[l]+nums[r]+nums[i];
                    }
                    if(nums[l]+nums[r]>fix)
                        r--;
                    else if(nums[l]+nums[r]<fix)
                        l++;
                }
            }
        }
        return res;
    }
};
