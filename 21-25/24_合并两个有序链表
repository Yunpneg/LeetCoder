将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 

示例：

输入：1->2->4, 1->3->4
输出：1->1->2->3->4->4


思路:
1. 定义一个带有头指针的链表p
2. 比较两个链表的元素, 将较小的先放置在链表p中
3. 防止链表长度不一致, 在最后要将剩余的链表元素放置在链表p后面


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) 
    {
        
        ListNode* p=new ListNode(0);
        ListNode* L = p; //移动指针
        while(l1 && l2)
        {
            if(l1->val <= l2->val)
            {
                p->next = l1; //将当前链表l1的元素赋给p的下一个指针(当前指针为头指针)
                l1 = l1->next; //指针后移
                p = p->next; //指针后移
            }
            else
            {
                p->next = l2;
                l2 = l2->next; 
                p = p->next;
            }
        }
        //防止l1和l2的长度不一致
        if(l1!=NULL)
            p->next = l1;
        if(l2!=NULL)
            p->next = l2;
        
        return L->next; //L包含为0的头指针, 所以要将头指针忽略
    }   
};


递归
Node *MergeRecursive(Node *head1,Node *head2)
{
 if(head1==nullptr&&head2==nullptr)
    return nullptr;
 else if(head1==nullptr)
   return head2;
 else if(head2==nullptr)
  return head1;
 else if(head1->val<=head2->val)
    head1->next =MergeRecursive(head1->next,head2);
 else 
   head2->next =MergeRecursive(head1,head2->next);
}
