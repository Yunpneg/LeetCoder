游戏里面有很多各式各样的任务，其中有一种任务玩家只能做一次，这类任务一共有1024个，
任务ID范围[1,1024]。请用32个unsigned int类型来记录着1024个任务是否已经完成。初始状态都是未完成。 

输入两个参数，都是任务ID，需要设置第一个ID的任务为已经完成；并检查第二个ID的任务是否已经完成。 
输出一个参数，如果第二个ID的任务已经完成输出1，如果未完成输出0。如果第一或第二个ID不在[1,1024]范围，则输出-1。

知识点:
  1. int型有2或4个字节, unsigned int和long int有4个字节
  2. 1字节(Byte) = 8 比特/位(bite)
  3. 置1: 或操作 |
    -> a |= b; a与b进行或操作, 赋值给a
    -> 将某一位置1, 按位或
  4. 置0: 与操作 &
    -> 将某一位置0, 按位与
  5. Bitmap 位图, 定位索引和所在索引的位号
    -> 一个byte占8个bit，如果每一个bit的值就是有或没有，也就是二进制的0或1
    -> Index(N) = N/8 = N >> 3; 
    -> Position(N) = N%8 = N & 7;（对于2的幂的数才能这样干！）
 
 思路:
  1. unsigned int为4个字节, 每个字节8位, 则是32位，32个unsigned int为32*32=1024位，刚好可以存1024个1/0数据
  2. 定位两个id的索引: Index(N) = N/32 = N >> 5; 
  3. 计算所在索引的位号, (id-1)%32 = id & 31
  4. 对id对应的索引位号进行置1(或操作), 表示任务完成 arr[group1] |= (1<<((id1-1)%32));
  5. 判断第二个id的相应索引位号是否为1, arr[group2] & (1<<((id2-1)%32)), 置0操作, 同为1则为1, 否则为0


#include <iostream>
using namespace std;

int main()
{
    unsigned int nums[32];
    int id1, id2;
    while(cin >> id1 >> id2)
    {
        int index1 = (id1 - 1) / 32;
        int index2 = (id2 - 1) / 32;
        if(!(id2 >= 1 && id2 <= 1024))
        {
            cout << -1 <<endl;;
            continue;
        }
        int pos1 = (id1 - 1) % 32;
        int pos2 = (id2 - 1) % 32;
        nums[index1] |= (1 << pos1);
        if((nums[index2] & (1 << pos2)) == 0)
        {
            cout << 0 << endl;
        }
        else cout << 1 << endl;;
    }
    return 0;
}
