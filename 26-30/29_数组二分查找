纬度的二进制编码：算法对纬度[-90, 90]通过二分法进行无限逼近（取决于所需精度，本题精度为6）。注意，本题进行二分法逼近过程中只采用向下取整来进行二分，针对二分中间值属于右区间。算法举例如下： 针对纬度为80进行二进制编码过程：
1) 区间[-90, 90]进行二分为[-90, 0),[0, 90]，成为左右区间，可以确定80为右区间，标记为1；
2) 针对上一步的右区间[0, 90]进行二分为[0, 45),[45, 90]，可以确定80是右区间，标记为1；
3) 针对[45, 90]进行二分为[45, 67),[67,90],可以确定80为右区间，标记为1；
4) 针对[67,90]进行二分为[67, 78),[78,90]，可以确定80为右区间，标记为1；
5) 针对[78, 90]进行二分为[78, 84),[84, 90]，可以确定80为左区间，标记为0；
6) 针对[78, 84)进行二分为[78, 81), [81, 84)，可以确定80为左区间，标记为0；


思路: 数组的二分查找

#include <iostream>
using namespace std;

int main()
{
    int n;
    while(cin >> n)
    {
        string str;
        int start = -90, end = 90, mid = 0;
        for(int i=0; i<6 && start<end; i++)
        {
            mid = (start + end) / 2;
            if(n < mid)
            {
                end = mid;
                str += '0';
            }
            else
            {
                start = mid;
                str += '1';
            }
        }
        cout << str << endl;
     }
    return 0;
}
