在一个二维数组中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。
请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。

class Solution {
    //分治
    //数组是升序的, 从左到右, 从上到下. 意味着二维数组的左下角元素是第一列中最大的, 最后一行中最小的;
    //利用该元素与target比较, 如果等于target,返回true
    //如果大于target, 则去掉最后一行, 从上一行开始;
    //如果小于target, 则去掉第一列, 从下一列开始.
public:
    bool Find(int target, vector<vector<int> > array) {

        int row_len = array.size();
        int column_len = array[0].size();
        if(row_len == 0) return false;
        if(column_len == 0) return false;
        int i=row_len - 1, j = 0;
        while(i >= 0 && j < column_len)
        {
            if(target == array[i][j])
            {
                return true;
            }
            else if(target > array[i][j])
            {
                j++; //从下一列开始
            }
            else if(target < array[i][j])
            {
                i--; //从上一行开始
            }         
        }
        
        return false;
    }
};
