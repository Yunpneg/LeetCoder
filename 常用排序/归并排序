//归并排序, 利用了分治策略
//分: 将原素组拆分, 以中值为界, 分拆为左子数组和右子数组, 递归循环, 直到子数组中只剩一个元素
//治: 合并两个子数组, 将较小(较大)的元素赋予临时数组中, 递归循环, 直到把所有的子数组都合并.


#include <iostream>
#include <vector>
using namespace std;
//合并数组
void Merge(vector<int> &res, int start, int mid, int end, vector<int> &temp)
{
    int i=start, j=mid+1;
    int t=0;
    while(i<=mid && j<=end)
    {
        if(res[i] <= res[j]) //两组数组依次比较大小
        {
            temp[t++] = res[i++];
        }
        else
        {
            temp[t++] = res[j++];
        }
    }
    //左数组仍存在元素
    while(i<=mid)
    {
        temp[t++] = res[i++];
    }
    //右数组仍存在元素
    while(j<=end)
    {
        temp[t++] = res[j++];
    }
    //将临时数组的元素拷贝到原数组
    t = 0;
    while(start <= end)
    {
        res[start++] = temp[t++];
    }
}
//要设置临时数组存放元素, 防止递归中频繁开辟空间
void Sort(vector<int> &res, int start, int end, vector<int> &temp)
{
    if(start < end)
    {
        int mid = (start + end) / 2;
        Sort(res, start, mid, temp);
        Sort(res, mid+1, end, temp);
        Merge(res, start, mid, end, temp);
    }
    
}
