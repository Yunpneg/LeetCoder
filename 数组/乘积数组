给定一个数组A[0,1,...,n-1],请构建一个数组B[0,1,...,n-1],
其中B中的元素B[i]=A[0]*A[1]*...*A[i-1]*A[i+1]*...*A[n-1]。不能使用除法。


设有数组大小为5。
对于第一个for循环
第一步：b[0] = 1;
第二步：b[1] = b[0] * a[0] = a[0]
第三步：b[2] = b[1] * a[1] = a[0] * a[1];
第四步：b[3] = b[2] * a[2] = a[0] * a[1] * a[2];
第五步：b[4] = b[3] * a[3] = a[0] * a[1] * a[2] * a[3];

然后对于第二个for循环
第一步
temp *= a[4] = a[4]; 
b[3] = b[3] * temp = a[0] * a[1] * a[2] * a[4];
第二步
temp *= a[3] = a[4] * a[3];
b[2] = b[2] * temp = a[0] * a[1] * a[4] * a[3];
第三步
temp *= a[2] = a[4] * a[3] * a[2]; 
b[1] = b[1] * temp = a[0] * a[4] * a[3] * a[2];
第四步
temp *= a[1] = a[4] * a[3] * a[2] * a[1]; 
b[0] = b[0] * temp = a[4] * a[3] * a[2] * a[1];

相当于求取上,下三角形的矩阵乘积

B0    1 A0 A1 ... An-2 An-1
B1    A0 1 A2 ... An-2 An-1
B2    A0 A1 1 ... An-2 An-1
...
...
Bn-2  A0 A1 A2 ... 1 An-1
Bn-1  A0 A1 A2 ... An-2 1



class Solution {
public:
    vector<int> multiply(const vector<int>& A) 
    {
        vector<int> B((int)A.size(), 0);
        B[0] = 1;
        for(int i=1; i<A.size(); i++)
        {
            B[i] = B[i-1]*A[i-1];
        }
        
        int temp = 1;//从n-2行开始, 因为B的最后一行的最后一个元素是1, 不需要再相乘
        for(int j=A.size()-2; j>=0; j--)
        {
            temp *= A[j+1];
            B[j] *= temp;
        }
        return B;    
    }
};
