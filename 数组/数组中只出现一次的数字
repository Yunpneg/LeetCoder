一个整型数组里除了两个数字之外，其他的数字都出现了两次。请写程序找出这两个只出现一次的数字。


思路: 利用hashmap
1. 这个可以可以使用一个Map，Map对应的键值key就是数组中的元素，value就是这个元素出现的次数。这样我
2. 通过一次遍历数组中的元素，如果元素出现在map中，则将其对应的value加1，否则将元素添加到map中，
3. 这样遍历一遍数组，我们就可以得到数组中每个元素对应出现的次数，然后再通过遍历一遍map，返回value为1对应的key就是我们需要求得元素。

void FindNumsAppearOnce(vector<int> data) 
    {
        map<int, int> hashmap = new HashMap<int, int>();
        //Map对应的键值key就是数组中的元素，value就是这个元素出现的次数
        for(int i=0; i<data.size(); i++)
        {
            if(hashmap.containsKey(i))
            {
                hashmap.put(i, hashmap.get(i) + 1);
            }
            else
            {
                hashmap.put(i, 1);
            }
        }
        //遍历一遍map，返回value为1对应的key就是我们需要求得元素
        int flag=0;
        for(int j=0; j<hashmap.size(); j++)
        {
            if(hashmap.get(i) == 1)
            {
                flag++;
            }
        }
        cout << flag << endl;
    }


利用map

#include <iostream>
#include <vector>
#include <map>
using namespace std;


void findOnce(vector<int> &data)
{
    map<int, int> mymap;
    map<int, int>::iterator iter;
    for(int i=0; i<data.size(); i++)
    {
        iter = mymap.find(data[i]);
        if(iter == mymap.end())
        {
            mymap.insert(make_pair(data[i], 1));
        }
        else
        {
            //如果map里面插入之前的<key, value>,如果key在map里面有的话，不会覆盖之前的value,
            //一般先判断之前有没有数据，有的话先删除，然后再去添加
            mymap.erase(iter);
            mymap.insert(make_pair(data[i], 2));
        }
    }
    //遍历一遍map，返回value为1对应的key就是我们需要求得元素
    
    iter = mymap.begin();
    for(; iter != mymap.end(); iter++)
    {
        if(iter->second == 1)
        {
            cout << iter->first <<" "<<endl;
        }
    }
    
}
    
    
思路: 利用异或运算的特性
(1)对于出现两次的元素，使用“异或”操作后结果肯定为0，那么我们就可以遍历一遍数组，对所有元素使用异或操作，那么得到的结果就是两个出现一次的元素的异或结果。
(2)因为这两个元素不相等，所以异或的结果肯定不是0，也就是可以再异或的结果中找到1位不为0的位，例如异或结果的最后一位不为0。
(3)这样我们就可以最后一位将原数组元素分为两组，一组该位全为1，另一组该位全为0。
(4)再次遍历原数组，最后一位为0的一起异或，最后一位为1的一起异或，两组异或的结果分别对应着两个结果。
 
class Solution {
public:
    void FindNumsAppearOnce(vector<int> data,int* num1,int *num2) {
        if(data.size() < 2) return ;
        int myxor = 0;
        int flag = 1;
        for(int i = 0 ; i < data.size(); ++ i )
            myxor ^= data[i]; //异或运算; 相同为0
        //从高位向低位; 判断各位是否为1
        while((myxor & flag) == 0) flag <<= 1; 
        *num1 = myxor;
        *num2 = myxor;
        for(int i = 0; i < data.size(); ++ i ){
            //按照flag所在的位, 将数组分为两组, 一组该位为1, 一组该位为0
            if((flag & data[i]) == 0) *num2 ^= data[i];
            else *num1 ^= data[i];
        }
    }
};
