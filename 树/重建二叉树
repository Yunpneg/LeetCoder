/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
    //1. 在二叉树的前序遍历序列中，第一个数字总是树的根结点的值
    //2. 搜索中序遍历序列, 找到根节点, 其左侧就是左子树的元素, 右侧是右子树的元素
    //3. 利用递归, 不断找出根节点, 左子树和右子树
public:
    TreeNode* reConstructBinaryTree(vector<int> pre,vector<int> vin) {
        int len = pre.size();
        TreeNode *root = myFun(pre, 0, len-1, vin, 0, len-1);
        return root;
    }
    TreeNode* myFun(vector<int> pre, int pre_begin, int pre_end, vector<int> vin, int vin_begin, int vin_end)
    {
        if(pre_begin > pre_end || vin_begin > vin_end) return NULL; //根节点元素都是最小的
        TreeNode *root = new TreeNode(pre[pre_begin]); //前序遍历中的第一个数字是根节点
        //遍历中序序列
        for(int i=vin_begin; i<=vin_end; i++)
        {
            //如果在中序序列中找到根节点
            if(vin[i] == pre[pre_begin])
            {
                //递归寻找左子树和右子树
                //i-vin_end+pre_begin: 
                //i-vin_end是中序序列中目标节点的左侧元素的长度, 属于左子树元素的长度
                //+pre_begin: 将这个长度放入前序序列中, 加上起始点, 就是左子树元素所在的区域
                root->left = myFun(pre, pre_begin+1, i-vin_begin+pre_begin, vin, vin_begin, i-1);
                root->right = myFun(pre, i-vin_begin+pre_begin+1, pre_end, vin, i+1, vin_end);
                break;
            }
        }
        return root;
    }
};
