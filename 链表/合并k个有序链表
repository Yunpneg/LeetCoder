合并 k 个排序链表，返回合并后的排序链表。请分析和描述算法的复杂度。

示例:

输入:
[
  1->4->5,
  1->3->4,
  2->6
]
输出: 1->1->2->3->4->4->5->6

知识点:
-> n<<1 向左移动一位, 相当于n=n*(2的1次方)
-> n>>1 无符号位移, 向右移动一位, 相当于n=n/(2的1次方)

思路:
1. 分支算法, 每次处理1/2的数组元素, 共log(n)次循环
2. 第一次循环了n/2次, 每次处理的链表最大长度都是m, 则复杂度为m*n/2, 即m*n
   第二次循环了n/4次, 每次处理的链表最大长度都是2m,则复杂度仍为m*n 
   ....
3. 设数组大小为n，链表最大长度为m，时间复杂度为m*n*log(n).

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        //当链表数组的长度等于1时, 停止循环
        while (lists.size() > 1)
        {
            int n = lists.size();
            //i循环至n/2,防止重复处理
            //每次处理1/2的数组元素, 循环了x次,一共是n,则x=log(n)
            for (int i = 0; i < n >> 1; i++)
                //每次将链表数组中的第一个链表和最后一个链表融合
                lists[i] = merge(lists[i], lists[n - i - 1]);
                
            //如果n为奇数, 则n/2的值要比实际数组长度少一位, 所以要(n+1)/2
            //如果n为偶数, (n+1)/2 = n/2
            lists.resize((n + 1) / 2);
        }
        return lists.size() == 0 ? nullptr : lists[0];
    }
    
    //两个有序链表排序
    ListNode* merge(ListNode* l1, ListNode* l2)
    {
        ListNode *head = new ListNode(0);
        ListNode *p = head;
        
        while (l1 && l2)
        {
            if (l1->val < l2->val)
            {
                p->next = l1;
                l1 = l1->next;
            }
            else
            {
                p->next = l2;
                l2 = l2->next;
            }
            p = p->next;
        }
        
        if (l1)
            p->next = l1;
        if (l2)
            p->next = l2;
        
        return head->next;
    }
};
