输入一个链表，按链表值从尾到头的顺序返回一个ArrayList。



  struct ListNode {
        int val;
        struct ListNode *next;
        ListNode(int x) :
              val(x), next(NULL) {
        }
  };

class Solution {
    //1. 定义vector容器, 依次存放链表数据
    //2. 翻转vector, 再输出; reverse(vector.begin(), vector.end())
public:
    vector<int> printListFromTailToHead(ListNode* head) {
        vector<int> vec;
        //ListNode *p = head;
        while(head!=NULL)
        {
            vec.push_back(head->val);
            head = head->next;
        }
        reverse(vec.begin(), vec.end());
        return vec;
    }
};


输入一个链表, 翻转链表后, 输出新链表的表头

struct ListNode {
	int val;
	struct ListNode *next;
	ListNode(int x) :
			val(x), next(NULL) {
	}
};
class Solution {
public:
//递归
    ListNode* ReverseList(ListNode* pHead) {
       
        //如果链表为空或者链表中只有一个元素
        if(pHead==NULL||pHead->next==NULL) return pHead;
         
        //先反转后面的链表，走到链表的末端结点
        ListNode* pReverseNode=ReverseList(pHead->next);
         
        //再将当前节点设置为后面节点的后续节点
        pHead->next->next=pHead;
        pHead->next=NULL;
         
        return pReverseNode;

    }
};
