用两个栈来实现一个队列，完成队列的Push和Pop操作。 队列中的元素为int类型

知识点:
  1. 栈, 线性表, 先进后出，删除与加入均在栈顶操作 
  1. stack.top(): 获取栈顶元素
  2. stack.push():增加栈顶元素
  3. stack.pop(): 移除栈顶元素
  4. 队列操作: 线性表, 先进先出, 队头做删除操作,在队尾做插入操作
  
  
class Solution
{
    //元素先依次进入栈1，再从栈1依次弹出到栈2，然后弹出栈2顶部的元素，整个过程就是一个队列的先进先出
    //但是在交换元素的时候需要判断两个栈的元素情况：
    //“进队列时”，队列中是否存在元素，若有，说明栈2中的元素不为空，此时就先将栈2的元素倒回到栈1 中，保持在“进队列状态”。
    //“出队列时”，将栈1的元素全部弹到栈2中，保持在“出队列状态”。
    //所以要做的判断是，进时，栈2是否为空，不为空，则栈2元素倒回到栈1，出时，将栈1元素全部弹到栈2中，直到栈1为空。
public:
    void push(int node) {
        //先依次进入栈1
        stack1.push(node);
    }

    int pop() {
        int a;
        //如果栈2为空, 则将栈1元素依次弹出到栈2
        if(stack2.empty())
        {
            while(!stack1.empty())
            {
                a = stack1.top();
                stack2.push(a);
                stack1.pop();
            }   
        }
        //如果栈2不为空, 则把栈2中的元素倒回到栈1中
        a = stack2.top();
        stack2.pop();
        return a;      
    }

private:
    stack<int> stack1;
    stack<int> stack2;
};
