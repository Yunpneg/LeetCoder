有一个含有n个数字的序列，每个数字的大小是不超过200的正整数，同时这个序列满足以下条件：  
1. a_1<=a_2 
2. a_n<=a_(n-1) （此时n>2） 
3. a_i<=max(a_{i-1},a_{i+1}) 
但是很不幸的是，在序列保存的过程中，有些数字丢失了，请你根据上述条件，计算可能有多少种不同的序列可以满足以上条件。


输入描述:
输入第一行是一个n，表示这个序列的长度。(3<=n<=10^4)

输入第二行有n个非负整数，中间用空格隔开，如果数字为0，说明这个数字丢失了，其他数字则都在1-200之间。

输出描述:
输出仅包含一个整数，即方案数对998244353取模的结果。


#include<iostream>
#include<algorithm>
#include<cstring>
 
using namespace std;
 
typedef long long LL;
const LL mod=998244353;
const int N=1e4+10,M=210;
int a[N];
LL f[N][M][3],s1[M],s2[M];//s1为0、1、2的前缀和、s2为0和1的前缀和
 
int main()
{
    int n;
    cin>>n;
    for(int i=1;i<=n;i++)
    {
        cin>>a[i];
    }
    //针对a[1]、a[2]进行初始化(a[1]和a[2]之间只有两种情况出现)
    for(int i=(a[1]?a[1]:1);i<=(a[1]?a[1]:200);i++)
    {
        for(int j =(a[2]?a[2]:1);j<=(a[2]?a[2]:200);j++)
        {
            if(i==j) f[2][j][1]++;
            else if(i<j) f[2][j][2]++;
        }
    }
    //初始化s1和s2(i=2的前缀和)
    for(int j=1;j<=200;j++)
    {
        s1[j]=s1[j-1]+f[2][j][0]+f[2][j][1]+f[2][j][2];
        s2[j]=s2[j-1]+f[2][j][0]+f[2][j][1];
    }
 
    //开始递推
    for(int i=3;i<=n;i++)
    {
        for(int j=(a[i]?a[i]:1);j<=(a[i]?a[i]:200);j++)
        {
            f[i][j][0]=(s2[200]-s2[j])%mod;
            f[i][j][1]=(f[i-1][j][0]+f[i-1][j][1]+f[i-1][j][2])%mod;
            f[i][j][2]=s1[j-1]%mod;
        }
        //每次i循环更新s1和s2
        for(int j=1;j<=200;j++)
        {
            s1[j]=s1[j-1]+f[i][j][0]+f[i][j][1]+f[i][j][2];
            s2[j]=s2[j-1]+f[i][j][0]+f[i][j][1];
        }
    }
 
    LL res=0;
 
    for(int j=(a[n]?a[n]:1);j<=(a[n]?a[n]:200);j++)
    {
        res=(res+f[n][j][0]+f[n][j][1])%mod;
    }
 
    cout<<res<<endl;
    return 0;
 
}
